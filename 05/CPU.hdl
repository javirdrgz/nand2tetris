// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:


    // A Register
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=loadA);
    ARegister(in=toAreg, load=loadA, out=Aout, out[0..14]=addressM); // addressM 15 bits ?

    // D Register
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dout);

    // instruction[3] -> writeM
    And(a=instruction[15], b=instruction[3], out=writeM);


    // Mux to A register
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=toAreg);
    // Mux to ALU
    Mux16(a=Aout, b=inM, sel=instruction[12], out=ALUMuxOut);



    // PC logic

    // DMux8Way(in=instruction[15], sel=instruction[0..2], a=null, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
    
    // test if it is an unconditional jump
    And(a=instruction[0], b=instruction[1], out=partialJMP);
    And(a=partialJMP, b=instruction[2], out=isJMP);
    // test if it is an eq to 0 jump
    And(a=ALUOutIsZero, b=instruction[1], out=isJE);
    // test if it is a negative jump
    And(a=ALUOutIsNeg, b=instruction[2], out=isJN);
    // test if it is a positive jump
    Or(a=ALUOutIsZero, b=ALUOutIsNeg, out=isZRorisNG);
    Not(in=isZRorisNG, out=ALUOutIsPositive);
    And(a=ALUOutIsPositive, b=instruction[0], out=isJG);

    Or(a=isJMP, b=isJE, out=tmp1);
    Or(a=tmp1, b=isJN, out=tmp2);
    Or(a=tmp2, b=isJG, out=JUMP);

    And(a=instruction[15], b=JUMP, out=isCandJUMP);

    PC(in=Aout, load=isCandJUMP, inc=true, reset=reset, out[0..14]=pc); // pc out 15 bits?

    ALU(x=Dout, y=ALUMuxOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, 
        zr=ALUOutIsZero, ng=ALUOutIsNeg);
}